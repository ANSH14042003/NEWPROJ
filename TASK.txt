npm create vite@latest
npm run dev
npm install tailwindcss @tailwindcss/vite

üìÅTIMERüìÅ src/

// File: src/App.tsx
import React, { useState, useRef } from 'react';

const App: React.FC = () => {
  const [time, setTime] = useState(0); // time in ms
  const [isRunning, setIsRunning] = useState(false);
  const timerRef = useRef<NodeJS.Timeout | null>(null);

  const startTimer = () => {
    if (!isRunning) {
      setIsRunning(true);
      timerRef.current = setInterval(() => {
        setTime((prev) => prev + 10);
      }, 10);
    }
  };

  const stopTimer = () => {
    if (timerRef.current) {
      clearInterval(timerRef.current);
      timerRef.current = null;
      setIsRunning(false);
    }
  };

  const resetTimer = () => {
    stopTimer();
    setTime(0);
  };

  const formatTime = (ms: number) => {
    const hours = Math.floor(ms / 3600000);
    const minutes = Math.floor((ms % 3600000) / 60000);
    const seconds = Math.floor((ms % 60000) / 1000);
    const milliseconds = ms % 1000;

    return `${String(hours).padStart(2, '0')}:
            ${String(minutes).padStart(2, '0')}:
            ${String(seconds).padStart(2, '0')}:
            ${String(milliseconds).padStart(3, '0')}`;
  };

  return (
    <div className="h-screen flex flex-col justify-center items-center bg-gray-100">
      <h1 className="text-4xl font-bold mb-8">Timer</h1>
      <div className="text-3xl font-mono bg-white p-4 rounded shadow-md">
        {formatTime(time)}
      </div>
      <div className="mt-6 flex gap-4">
        <button
          onClick={startTimer}
          className="bg-green-600 text-white px-4 py-2 rounded"
          disabled={isRunning}
        >
          Start
        </button>
        <button
          onClick={stopTimer}
          className="bg-yellow-500 text-white px-4 py-2 rounded"
          disabled={!isRunning}
        >
          Stop
        </button>
        <button
          onClick={resetTimer}
          className="bg-red-600 text-white px-4 py-2 rounded"
        >
          Reset
        </button>
      </div>
    </div>
  );
};

export default App;



üìÅFETCH API src/

// File: src/App.tsx
import React, { useEffect, useState } from 'react';
import SearchBar from './components/SearchBar';
import Table from './components/Table';
import { User } from './types/Data';

const App: React.FC = () => {
  const [users, setUsers] = useState<User[]>([]);
  const [searchQuery, setSearchQuery] = useState('');

  useEffect(() => {
    fetch('https://jsonplaceholder.typicode.com/users')
      .then((res) => res.json())
      .then((data) => setUsers(data))
      .catch((err) => console.error(err));
  }, []);

  const filteredUsers = users.filter((user) =>
    user.name.toLowerCase().includes(searchQuery.toLowerCase())
  );

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-4">User Table</h1>
      <SearchBar value={searchQuery} onChange={setSearchQuery} />
      <Table users={filteredUsers} />
    </div>
  );
};

export default App;


// File: src/components/SearchBar.tsx
import React from 'react';

interface Props {
  value: string;
  onChange: (value: string) => void;
}

const SearchBar: React.FC<Props> = ({ value, onChange }) => {
  return (
    <input
      type="text"
      placeholder="Search by name..."
      value={value}
      onChange={(e) => onChange(e.target.value)}
      className="border p-2 mb-4 w-full"
    />
  );
};

export default SearchBar;


// File: src/components/Table.tsx
import React from 'react';
import { User } from '../types/Data';

interface Props {
  users: User[];
}

const Table: React.FC<Props> = ({ users }) => {
  return (
    <table className="w-full border-collapse border">
      <thead>
        <tr className="bg-gray-200">
          <th className="border px-4 py-2">Name</th>
          <th className="border px-4 py-2">Email</th>
          <th className="border px-4 py-2">Phone</th>
        </tr>
      </thead>
      <tbody>
        {users.map((user) => (
          <tr key={user.id} className="hover:bg-gray-100">
            <td className="border px-4 py-2">{user.name}</td>
            <td className="border px-4 py-2">{user.email}</td>
            <td className="border px-4 py-2">{user.phone}</td>
          </tr>
        ))}
      </tbody>
    </table>
  );
};

export default Table;


// File: src/types/Data.ts
export interface User {
  id: number;
  name: string;
  email: string;
  phone: string;
}

üìÅ CART src/

// File: src/App.tsx
import React, { useState } from 'react';
import ProductList from './components/ProductList';
import Cart from './components/Cart';
import { Product } from './types/Product';

const dummyProducts: Product[] = [
  { id: 1, name: 'Laptop', price: 999 },
  { id: 2, name: 'Headphones', price: 199 },
  { id: 3, name: 'Smartphone', price: 599 },
];

const App: React.FC = () => {
  const [cart, setCart] = useState<Product[]>([]);
  const [showCart, setShowCart] = useState(false);

  const addToCart = (product: Product) => {
    setCart([...cart, product]);
  };

  const removeFromCart = (id: number) => {
    setCart(cart.filter((item) => item.id !== id));
  };

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">My Shop</h1>
        <button
          className="bg-blue-600 text-white px-4 py-2 rounded"
          onClick={() => setShowCart(!showCart)}
        >
          {showCart ? 'Back to Products' : `Cart (${cart.length})`}
        </button>
      </div>

      {showCart ? (
        <Cart cart={cart} removeFromCart={removeFromCart} />
      ) : (
        <ProductList products={dummyProducts} addToCart={addToCart} />
      )}
    </div>
  );
};

export default App;


// File: src/components/ProductList.tsx
import React from 'react';
import { Product } from '../types/Product';

interface Props {
  products: Product[];
  addToCart: (product: Product) => void;
}

const ProductList: React.FC<Props> = ({ products, addToCart }) => {
  return (
    <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
      {products.map((product) => (
        <div
          key={product.id}
          className="border p-4 rounded shadow hover:shadow-lg"
        >
          <h2 className="text-lg font-bold">{product.name}</h2>
          <p className="text-gray-700">${product.price}</p>
          <button
            onClick={() => addToCart(product)}
            className="mt-2 bg-green-500 text-white px-3 py-1 rounded"
          >
            Add to Cart
          </button>
        </div>
      ))}
    </div>
  );
};

export default ProductList;


// File: src/components/Cart.tsx
import React from 'react';
import { Product } from '../types/Product';

interface Props {
  cart: Product[];
  removeFromCart: (id: number) => void;
}

const Cart: React.FC<Props> = ({ cart, removeFromCart }) => {
  return (
    <div>
      <h2 className="text-xl font-bold mb-4">Your Cart</h2>
      {cart.length === 0 ? (
        <p>No items in cart.</p>
      ) : (
        <ul>
          {cart.map((item) => (
            <li
              key={item.id}
              className="flex justify-between items-center border-b py-2"
            >
              <span>
                {item.name} - ${item.price}
              </span>
              <button
                className="bg-red-500 text-white px-2 py-1 rounded"
                onClick={() => removeFromCart(item.id)}
              >
                Remove
              </button>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
};

export default Cart;


// File: src/types/Product.ts
export interface Product {
  id: number;
  name: string;
  price: number;
}

üìÅCAKE CART src/

// File: src/App.tsx
import React, { useEffect, useState } from 'react';
import CakeCard from './components/CakeCard';
import Cart from './components/Cart';
import { Cake } from './types/Cake';

const API_URL = 'https://api.sampleapis.com/cakes/cakes'; // ‚úÖ Example cake API

const App: React.FC = () => {
  const [cakes, setCakes] = useState<Cake[]>([]);
  const [cart, setCart] = useState<Cake[]>([]);
  const [showCart, setShowCart] = useState(false);

  useEffect(() => {
    fetch(API_URL)
      .then((res) => res.json())
      .then((data) => setCakes(data))
      .catch((err) => console.error(err));
  }, []);

  const addToCart = (cake: Cake) => {
    setCart([...cart, cake]);
  };

  const removeFromCart = (id: number) => {
    setCart(cart.filter((item) => item.id !== id));
  };

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">üç∞ Cake Shop</h1>
        <button
          onClick={() => setShowCart(!showCart)}
          className="bg-purple-600 text-white px-4 py-2 rounded"
        >
          {showCart ? 'Back to Cakes' : `Cart (${cart.length})`}
        </button>
      </div>

      {showCart ? (
        <Cart cart={cart} removeFromCart={removeFromCart} />
      ) : (
        <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
          {cakes.slice(0, 12).map((cake) => (
            <CakeCard key={cake.id} cake={cake} addToCart={addToCart} />
          ))}
        </div>
      )}
    </div>
  );
};

export default App;


// File: src/components/CakeCard.tsx
import React from 'react';
import { Cake } from '../types/Cake';

interface Props {
  cake: Cake;
  addToCart: (cake: Cake) => void;
}

const CakeCard: React.FC<Props> = ({ cake, addToCart }) => {
  return (
    <div className="border rounded shadow-md p-4">
      <img
        src={cake.image}
        alt={cake.title}
        className="h-48 w-full object-cover rounded mb-2"
      />
      <h2 className="text-lg font-bold">{cake.title}</h2>
      <p className="text-gray-700">${cake.price || 20}</p>
      <button
        onClick={() => addToCart(cake)}
        className="mt-2 bg-green-500 text-white px-3 py-1 rounded"
      >
        Add to Cart
      </button>
    </div>
  );
};

export default CakeCard;


// File: src/components/Cart.tsx
import React from 'react';
import { Cake } from '../types/Cake';

interface Props {
  cart: Cake[];
  removeFromCart: (id: number) => void;
}

const Cart: React.FC<Props> = ({ cart, removeFromCart }) => {
  return (
    <div>
      <h2 className="text-xl font-bold mb-4">üõí Your Cart</h2>
      {cart.length === 0 ? (
        <p>No cakes in cart.</p>
      ) : (
        <ul>
          {cart.map((cake) => (
            <li key={cake.id} className="flex justify-between items-center border-b py-2">
              <span>{cake.title} - ${cake.price || 20}</span>
              <button
                onClick={() => removeFromCart(cake.id)}
                className="bg-red-500 text-white px-2 py-1 rounded"
              >
                Remove
              </button>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
};

export default Cart;


// File: src/types/Cake.ts
export interface Cake {
  id: number;
  title: string;
  description: string;
  image: string;
  price?: number;
}

üìÅ public/index.html
------------------------------------------------------------
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="theme-color" content="#000000" />
    <title>ToDo App</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css">
  </head>
  <body class="bg-gray-200">
    <div id="root"></div>
  </body>
</html>


üìÅ src/types/Todo.ts
------------------------------------------------------------
export interface Todo {
  id: number;
  text: string;
  completed: boolean;
}


üìÅ src/context/TodoContext.tsx
------------------------------------------------------------
import React, { createContext, useContext, useState } from 'react';
import { Todo } from '../types/Todo';

interface TodoContextProps {
  todos: Todo[];
  addTodo: (text: string) => void;
  toggleTodo: (id: number) => void;
  deleteTodo: (id: number) => void;
}

const TodoContext = createContext<TodoContextProps | undefined>(undefined);

export const useTodo = () => {
  const context = useContext(TodoContext);
  if (!context) {
    throw new Error('useTodo must be used within a TodoProvider');
  }
  return context;
};

export const TodoProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [todos, setTodos] = useState<Todo[]>([]);

  const addTodo = (text: string) => {
    const newTodo: Todo = {
      id: Date.now(),
      text,
      completed: false,
    };
    setTodos((prev) => [...prev, newTodo]);
  };

  const toggleTodo = (id: number) => {
    setTodos((prev) =>
      prev.map((todo) => (todo.id === id ? { ...todo, completed: !todo.completed } : todo))
    );
  };

  const deleteTodo = (id: number) => {
    setTodos((prev) => prev.filter((todo) => todo.id !== id));
  };

  return (
    <TodoContext.Provider value={{ todos, addTodo, toggleTodo, deleteTodo }}>
      {children}
    </TodoContext.Provider>
  );
};


üìÅ src/components/TodoForm.tsx
------------------------------------------------------------
import React, { useState } from 'react';
import { useTodo } from '../context/TodoContext';

const TodoForm: React.FC = () => {
  const [text, setText] = useState('');
  const { addTodo } = useTodo();

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (text.trim()) {
      addTodo(text);
      setText('');
    }
  };

  return (
    <form onSubmit={handleSubmit} className="flex gap-2 mt-4">
      <input
        value={text}
        onChange={(e) => setText(e.target.value)}
        placeholder="Add a new todo"
        className="border p-2 w-full rounded"
      />
      <button type="submit" className="bg-blue-600 text-white px-4 py-2 rounded">
        Add
      </button>
    </form>
  );
};

export default TodoForm;


üìÅ src/components/TodoList.tsx
------------------------------------------------------------
import React from 'react';
import { useTodo } from '../context/TodoContext';

const TodoList: React.FC = () => {
  const { todos, toggleTodo, deleteTodo } = useTodo();

  if (todos.length === 0) {
    return <p className="mt-4 text-gray-500">No tasks. Add one!</p>;
  }

  return (
    <ul className="mt-4 space-y-2">
      {todos.map((todo) => (
        <li
          key={todo.id}
          className="flex justify-between items-center p-2 border rounded bg-white"
        >
          <span
            onClick={() => toggleTodo(todo.id)}
            className={`cursor-pointer ${
              todo.completed ? 'line-through text-gray-500' : ''
            }`}
          >
            {todo.text}
          </span>
          <button
            onClick={() => deleteTodo(todo.id)}
            className="bg-red-500 text-white px-2 py-1 rounded"
          >
            Delete
          </button>
        </li>
      ))}
    </ul>
  );
};

export default TodoList;


üìÅ src/App.tsx
------------------------------------------------------------
import React from 'react';
import { TodoProvider } from './context/TodoContext';
import TodoForm from './components/TodoForm';
import TodoList from './components/TodoList';

const App: React.FC = () => {
  return (
    <TodoProvider>
      <div className="max-w-md mx-auto p-6 mt-10 bg-gray-100 rounded shadow">
        <h1 className="text-2xl font-bold text-center mb-4">üìù ToDo App</h1>
        <TodoForm />
        <TodoList />
      </div>
    </TodoProvider>
  );
};

export default App;


üìÅ src/index.tsx
------------------------------------------------------------
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root')!);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

REDUXTODO
üìÅ public/index.html
------------------------------------------------------------
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>ToDo App Redux</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  </head>
  <body class="bg-gray-200">
    <div id="root"></div>
  </body>
</html>


üìÅ src/types/Todo.ts
------------------------------------------------------------
export interface Todo {
  id: number;
  text: string;
  completed: boolean;
}


üìÅ src/features/todo/todoSlice.ts
------------------------------------------------------------
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { Todo } from '../../types/Todo';

interface TodoState {
  todos: Todo[];
}

const initialState: TodoState = {
  todos: [],
};

const todoSlice = createSlice({
  name: 'todo',
  initialState,
  reducers: {
    addTodo: (state, action: PayloadAction<string>) => {
      const newTodo: Todo = {
        id: Date.now(),
        text: action.payload,
        completed: false,
      };
      state.todos.push(newTodo);
    },
    toggleTodo: (state, action: PayloadAction<number>) => {
      const todo = state.todos.find((t) => t.id === action.payload);
      if (todo) {
        todo.completed = !todo.completed;
      }
    },
    deleteTodo: (state, action: PayloadAction<number>) => {
      state.todos = state.todos.filter((t) => t.id !== action.payload);
    },
  },
});

export const { addTodo, toggleTodo, deleteTodo } = todoSlice.actions;
export default todoSlice.reducer;


üìÅ src/app/store.ts
------------------------------------------------------------
import { configureStore } from '@reduxjs/toolkit';
import todoReducer from '../features/todo/todoSlice';

export const store = configureStore({
  reducer: {
    todo: todoReducer,
  },
});

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;


üìÅ src/components/TodoForm.tsx
------------------------------------------------------------
import React, { useState } from 'react';
import { useDispatch } from 'react-redux';
import { addTodo } from '../features/todo/todoSlice';
import { AppDispatch } from '../app/store';

const TodoForm: React.FC = () => {
  const [text, setText] = useState('');
  const dispatch = useDispatch<AppDispatch>();

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (text.trim()) {
      dispatch(addTodo(text));
      setText('');
    }
  };

  return (
    <form onSubmit={handleSubmit} className="flex gap-2 mt-4">
      <input
        value={text}
        onChange={(e) => setText(e.target.value)}
        placeholder="Add a new todo"
        className="border p-2 w-full rounded"
      />
      <button type="submit" className="bg-blue-600 text-white px-4 py-2 rounded">
        Add
      </button>
    </form>
  );
};

export default TodoForm;


üìÅ src/components/TodoList.tsx
------------------------------------------------------------
import React from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { RootState, AppDispatch } from '../app/store';
import { toggleTodo, deleteTodo } from '../features/todo/todoSlice';

const TodoList: React.FC = () => {
  const todos = useSelector((state: RootState) => state.todo.todos);
  const dispatch = useDispatch<AppDispatch>();

  if (todos.length === 0) {
    return <p className="mt-4 text-gray-500">No tasks. Add one!</p>;
  }

  return (
    <ul className="mt-4 space-y-2">
      {todos.map((todo) => (
        <li
          key={todo.id}
          className="flex justify-between items-center p-2 border rounded bg-white"
        >
          <span
            onClick={() => dispatch(toggleTodo(todo.id))}
            className={`cursor-pointer ${
              todo.completed ? 'line-through text-gray-500' : ''
            }`}
          >
            {todo.text}
          </span>
          <button
            onClick={() => dispatch(deleteTodo(todo.id))}
            className="bg-red-500 text-white px-2 py-1 rounded"
          >
            Delete
          </button>
        </li>
      ))}
    </ul>
  );
};

export default TodoList;


üìÅ src/App.tsx
------------------------------------------------------------
import React from 'react';
import TodoForm from './components/TodoForm';
import TodoList from './components/TodoList';

const App: React.FC = () => {
  return (
    <div className="max-w-md mx-auto p-6 mt-10 bg-gray-100 rounded shadow">
      <h1 className="text-2xl font-bold text-center mb-4">üìù ToDo App (Redux)</h1>
      <TodoForm />
      <TodoList />
    </div>
  );
};

export default App;


üìÅ src/index.tsx
------------------------------------------------------------
import React from 'react';
import ReactDOM from 'react-dom/client';
import { Provider } from 'react-redux';
import { store } from './app/store';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root')!);
root.render(
  <React.StrictMode>
    <Provider store={store}>
      <App />
    </Provider>
  </React.StrictMode>
);



